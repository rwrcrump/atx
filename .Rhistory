# + n_powerplants_2016
+ main_source_of_generation_2016,
data = bry_corrected)
# adjusting for covariates, all types of parametric variables, whose variation contains location specific stuff
adjusted_model <- lm(solar_generation_mwh_2018 ~ bryant17_county
+ electricity_demand_mwh_2016
+ solar_generation_mwh_2016
# + n_powerplants_2016
+ main_source_of_generation_2016,
data = bry_corrected)
# naive estimator
naive_model <- lm(solar_generation_mwh_2018 ~ bryant17_county, data = bry_corrected)
summary(adjusted_model)
# adjusting for covariates, all types of parametric variables, whose variation contains location specific stuff
adjusted_model <- lm(solar_generation_mwh_2018 ~ bryant17_county
+ electricity_demand_mwh_2016
+ solar_generation_mwh_2016
+ n_powerplants_2016
+ main_source_of_generation_2016,
data = bry_corrected)
# naive estimator
naive_model <- lm(solar_generation_mwh_2018 ~ bryant17_county, data = bry_corrected)
summary(adjusted_model)
summary(adjusted_model)
set.seed(2021)
# exact match on categorical variables, ? try n_pplants ?
bry_processed <- matchit(bryant17_county ~
state +
main_source_of_generation_2016,
method = "exact",
data = bry_corrected)
bry_matched <- match.data(bry_processed)
# basically, we just need to run regression with weights = weights, and estimand setting.
view(bry_matched)
bry_matched_test <- bry_matched %>%
filter(subclass == 1) %>%
select(state, main_source_of_generation_2016, weights, subclass)
view(bry_matched_test)
bry_matched_test <- bry_matched %>%
filter(subclass == 1) %>%
select(bryant17_county, state, main_source_of_generation_2016, weights, subclass)
view(bry_matched_test)
bry_matched_test <- bry_matched %>%
filter(subclass == 2) %>%
select(bryant17_county, state, main_source_of_generation_2016, weights, subclass)
view(bry_matched_test)
bry_balance %>%
kable(col.names = c("Diff in Means", "p-value"))
length(bry_matched)
view(bry_matched)
bry_matched_test <- bry_matched %>%
count(bryant17_county == 1)
view(bry_matched_test)
names(bry_corrected)
set.seed(2021)
# exact match on categorical variables, ? try n_pplants ?
bry_processed <- matchit(bryant17_county ~
state +
n_powerplants_2016 +
main_source_of_generation_2016,
method = "exact",
data = bry_corrected)
bry_matched <- match.data(bry_processed)
# basically, we just need to run regression with weights = weights, and estimand setting.
bry_matched_test <- bry_matched %>%
count(bryant17_county == 1) %>%
view()
set.seed(2021)
# exact match on categorical variables, ? try n_pplants ?
bry_processed <- matchit(bryant17_county ~
# state +
n_powerplants_2016 +
main_source_of_generation_2016,
method = "exact",
data = bry_corrected)
bry_matched <- match.data(bry_processed)
# basically, we just need to run regression with weights = weights, and estimand setting.
bry_matched_test <- bry_matched %>%
count(bryant17_county == 1) %>%
view()
library(tidyverse)
library(RSocrata)
library(sf)
library(tmap)
atx_boundary <- st_read("data/BOUNDARIES_jurisdictions/geo_export_2c504b0f-ef27-4b85-b14a-ef7e457dface.shp")
setwd("~/skool/spatial/atx/")
atx_boundary <- st_read("data/BOUNDARIES_jurisdictions/geo_export_2c504b0f-ef27-4b85-b14a-ef7e457dface.shp")
coa_limits <- atx_boundary %>%
filter(jurisdicti == "AUSTIN FULL PURPOSE")
coa_tracts <- st_read("data/Boundaries_ Austin MSA Census Tracts 2010/geo_export_60234b6b-2112-47a8-bd4c-586066ef4ac7.shp")
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
coa_tracts <- coa_tracts %>%
select(tractce10, geometry)
test <- st_overlaps(coa_tracts, coa_limits)
class(test)
glimpse(test)
test_1 <- filter(coa_tracts, lengths(test) > 1)
class(test_1)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test_1 <- filter(coa_tracts, lengths(test > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test_1 <- filter(coa_tracts, lengths(test > 0)
test_1 <- filter(coa_tracts, lengths(test > 0))
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
print(test[1])
print(test[[1]])
print(test[[2]])
summary(test)
view(coa_tracts)
coa_tracts <- st_read("data/Boundaries_ Austin MSA Census Tracts 2010/geo_export_60234b6b-2112-47a8-bd4c-586066ef4ac7.shp")
view(coa_tracts)
coa_tracts <- coa_tracts %>%
select(tractce10, geometry)
test <- st_within(coa_tracts, coa_limits)
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test <- st_contains(coa_tracts, coa_limits)
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test <- st_touches(coa_tracts, coa_limits)
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test <- st_covered_by(coa_tracts, coa_limits)
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
test <- st_intersects(coa_tracts, coa_limits)
test_1 <- filter(coa_tracts, lengths(test) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
MSA_tracts <- st_read("data/Boundaries_ Austin MSA Census Tracts 2010/geo_export_60234b6b-2112-47a8-bd4c-586066ef4ac7.shp")
MSA_tracts <- MSA_tracts %>%
select(tractce10, geometry)
tm_shape(MSA_tracts) +
tm_fill() +
tm_borders()
intersects <- st_intersects(MSA_tracts, coa_limits)
coa_tracts <- filter(coa_tracts, lengths(intersects) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
library(tidyverse)
library(tidycensus)
library(RSocrata)
library(lubridate)
library(sf)
library(tmap)
setwd("~/skool/spatial/atx/")
options(tigris_use_cache = TRUE)
# median home value, this is a table and not a variable. so can't combine with others
homeval_by_tract <- get_acs(
geometry = TRUE,
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = "DP04_0089E")
med_homeval_estimates <- homeval_by_tract %>%
# remove GEOID and margin of error columns
select(NAME, DP04_0089E) %>%
# clean up columns and values
rename("tract" = NAME,
"med_homeval" = DP04_0089E) %>%
mutate(tract = str_extract(tract, "[0-9\\.]+"))
class(med_homeval_estimates)
glimpse(med_homeval_estimates)
intersects <- st_intersects(med_homeval_estimates, coa_limits)
st_crs(med_homeval_estimates)
st_crs(coa_limits)
st_transform(med_homeval_estimates, WGS84)
?st_transform
st_transform(med_homeval_estimates, st_crs(coa_limits))
intersects <- st_intersects(med_homeval_estimates, coa_limits)
med_homeval_estimates <- st_transform(med_homeval_estimates, st_crs(coa_limits))
intersects <- st_intersects(med_homeval_estimates, coa_limits)
coa_tracts <- filter(med_homeval_estimates, lengths(intersects) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
?st_polygonize
test <- st_polygonize(coa_tracts)
test <- st_boundary(coa_tracts)
tm_shape(test) +
tm_fill() +
tm_borders()
test <- st_polygon(coa_tracts)
test <- st_union(coa_tracts)
tm_shape(test) +
tm_fill() +
tm_borders()
# atx traffic grabber
library(tidyverse)
library(tidycensus)
library(RSocrata)
library(lubridate)
library(sf)
library(tmap)
setwd("~/skool/spatial/atx/")
options(tigris_use_cache = TRUE)
# specify date range
years_ago <- today() - years(2)
# execute API query
crash_url <- glue::glue("https://data.austintexas.gov/resource/dx9v-zd7x.json?$where=published_date > '{years_ago}'")
crash_raw <- as_tibble(read.socrata(crash_url))
acs_tables <- read_csv("data/acs_tables/acs_vars.csv")
# collect all estimate variables names for commute data
commute <- acs_tables %>%
filter(str_detect(Label, "COMMUTING") & str_detect(Label, "Estimate")) %>%
select(-c(Concept, Required, Limit, Group, X9, `Predicate Type`, Attributes)) %>%
mutate(Label = str_replace(Label, "!!COMMUTING TO WORK!!Workers 16 years and over", " "),
Label = str_replace(Label, "!!", " "))
commute_vars <- list(commute$Name)
commute_by_tract <- get_acs(
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = commute_vars[[1]]) # commute variables
# clean census data
commute_estimates <- commute_by_tract %>%
# remove GEOID and margin of error columns
select(-c(GEOID, ends_with("M"))) %>%
# clean up columns and values
rename("tract" = NAME,
"total_commuters" = DP03_0018E,
"drove_alone" = DP03_0019E,
"carpooled" = DP03_0020E,
"transit" = DP03_0021E,
"walked" = DP03_0022E,
"other_means" = DP03_0023E,
"work_from_home" = DP03_0024E,
"av_commute_time(minutes)" = DP03_0025E)
# compute rates
commute_rates <- commute_estimates %>%
transmute(tract = tract,
`av_commute_time(minutes)` = `av_commute_time(minutes)`,
da_rate = drove_alone/total_commuters,
cp_rate = carpooled/total_commuters,
transit_rate = transit/total_commuters,
walked_rate = walked/total_commuters,
other_rate = other_means/total_commuters,
wfh_rate = work_from_home/total_commuters)
rent_by_tract <- get_acs(
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = "DP04_0134E")
med_rent_estimates <- rent_by_tract %>%
# remove GEOID and margin of error columns
select(NAME, DP04_0134E) %>%
# clean up columns and values
rename("tract" = NAME,
"med_rent" = DP04_0134E)
# median home value, this is a table and not a variable. so can't combine with others
homeval_by_tract <- get_acs(
geometry = TRUE,
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = "DP04_0089E")
med_homeval_estimates <- homeval_by_tract %>%
# remove GEOID and margin of error columns
select(NAME, DP04_0089E) %>%
# clean up columns and values
rename("tract" = NAME,
"med_homeval" = DP04_0089E)
travis_county <- commute_rates %>%
left_join(med_rent_estimates, by = "tract")
travis_county <- commute_rates %>%
left_join(med_rent_estimates, by = "tract") %>%
left_join(med_homeval_estimates, by = "tract")
class(travis_county)
glimpse(travis_county)
rm(list = ls())
acs_tables <- read_csv("data/acs_tables/acs_vars.csv")
# collect all estimate variables names for commute data
commute <- acs_tables %>%
filter(str_detect(Label, "COMMUTING") & str_detect(Label, "Estimate")) %>%
select(-c(Concept, Required, Limit, Group, X9, `Predicate Type`, Attributes)) %>%
mutate(Label = str_replace(Label, "!!COMMUTING TO WORK!!Workers 16 years and over", " "),
Label = str_replace(Label, "!!", " "))
commute_vars <- list(commute$Name)
commute_by_tract <- get_acs(
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = commute_vars[[1]]) # commute variables
# clean census data
commute_estimates <- commute_by_tract %>%
# remove GEOID and margin of error columns
select(-c(GEOID, ends_with("M"))) %>%
# clean up columns and values
rename("tract" = NAME,
"total_commuters" = DP03_0018E,
"drove_alone" = DP03_0019E,
"carpooled" = DP03_0020E,
"transit" = DP03_0021E,
"walked" = DP03_0022E,
"other_means" = DP03_0023E,
"work_from_home" = DP03_0024E,
"av_commute_time(minutes)" = DP03_0025E)
glimpse(commute_estimates)
# compute rates
commute_rates <- commute_estimates %>%
transmute(tract = tract,
`av_commute_time(minutes)` = `av_commute_time(minutes)`,
da_rate = drove_alone/total_commuters,
cp_rate = carpooled/total_commuters,
transit_rate = transit/total_commuters,
walked_rate = walked/total_commuters,
other_rate = other_means/total_commuters,
wfh_rate = work_from_home/total_commuters)
glimpse(commute_rates)
rent_by_tract <- get_acs(
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = "DP04_0134E")
med_rent_estimates <- rent_by_tract %>%
# remove GEOID and margin of error columns
select(NAME, DP04_0134E) %>%
# clean up columns and values
rename("tract" = NAME,
"med_rent" = DP04_0134E)
glimpse(med_rent_estimates)
# median home value, this is a table and not a variable. so can't combine with others
homeval_by_tract <- get_acs(
geometry = TRUE,
geography = "tract",
state = "Texas",
county = "Travis",
survey = "acs5",
year = 2019,
output = "wide",
variables = "DP04_0089E")
med_homeval_estimates <- homeval_by_tract %>%
# remove GEOID and margin of error columns
select(NAME, DP04_0089E) %>%
# clean up columns and values
rename("tract" = NAME,
"med_homeval" = DP04_0089E)
glimpse(med_homeval_estimates)
travis_county <- commute_rates %>%
left_join(med_rent_estimates, by = "tract") %>%
left_join(med_homeval_estimates, by = "tract")
glimpse(travis_county)
class(travis_county$geometry)
st_geometry(travis_county)
st_as_sf(travis_county)
class(travis_county)
# convert back to sf object
travis_county <- st_as_sf(travis_county)
class(travis_county)
atx_boundary <- st_read("data/BOUNDARIES_jurisdictions/geo_export_2c504b0f-ef27-4b85-b14a-ef7e457dface.shp")
coa_limits <- atx_boundary %>%
filter(jurisdicti == "AUSTIN FULL PURPOSE")
coa_tracts <- st_transform(travis_county, st_crs(coa_limits))
intersects <- st_intersects(med_homeval_estimates, coa_limits)
intersects <- st_intersects(coa_tracts, coa_limits)
coa_tracts <- filter(med_homeval_estimates, lengths(intersects) > 0)
tm_shape(test_1) +
tm_fill() +
tm_borders()
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
atx_boundary <- st_read("data/BOUNDARIES_jurisdictions/geo_export_2c504b0f-ef27-4b85-b14a-ef7e457dface.shp")
coa_limits <- atx_boundary %>%
filter(jurisdicti == "AUSTIN FULL PURPOSE")
coa_tracts <- st_transform(travis_county, st_crs(coa_limits))
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
intersects <- st_intersects(coa_tracts, coa_limits)
coa_tracts <- filter(med_homeval_estimates, lengths(intersects) > 0)
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
tm_shape(coa_limits) +
tm_fill() +
tm_borders()
coa_tracts <- st_transform(travis_county, st_crs(coa_limits))
intersects <- st_intersects(coa_tracts, coa_limits)
test <- filter(coa_tracts, lengths(intersects) > 0)
tm_shape(test) +
tm_fill() +
tm_borders()
travis_county <- commute_rates %>%
left_join(med_rent_estimates, by = "tract") %>%
left_join(med_homeval_estimates, by = "tract") %>%
mutate(tract = str_extract(tract, "[0-9\\.]+"))
# convert back to sf object
travis_county <- st_as_sf(travis_county)
# array of logical values, limiting county to city
intersects <- st_intersects(travis_county, coa_limits)
# conform CRS to city boundary
travis_county <- st_transform(travis_county, st_crs(coa_limits))
# array of logical values, limiting county to city
intersects <- st_intersects(travis_county, coa_limits)
coa_tracts <- filter(travis_county, lengths(intersects) > 0)
tm_shape(coa_census_shape) +
tm_fill() +
tm_borders()
tm_shape(coa_tracts) +
tm_fill() +
tm_borders()
# create single polygon shape from tract borders
coa_tract_boundary <- st_union(coa_tracts)
class(coa_tract_boundary)
tm_shape(coa_tract_boundary) +
tm_fill() +
tm_borders()
?st_write
# save geometries to local drive
st_write(coa_tracts)
# save geometries to local drive
st_write(coa_tracts, "data/coa_tracts.shp")
st_write(coa_tract_boundary, "data/coa_tract_boundary/coa_tract_boundary.shp")
st_write(coa_tract_boundary, "data/generated_shp_files/coa_tract_boundary/coa_tract_boundary.shp")
# save geometries to local drive
st_write(coa_tracts, "data/generated_shp_files/coa_tracts/coa_tracts.shp")
# save geometries to local drive
st_write(coa_tracts, "data/generated_shp_files/coa_tracts/coa_tracts.shp")
?tm_fill
tm_shape(coa_tracts) +
tm_fill("transit") +
tm_borders()
tm_shape(coa_tracts) +
tm_fill(transit) +
tm_borders()
tm_shape(coa_tracts) +
tm_ploygons("transit") +
tm_borders()
tm_shape(coa_tracts) +
tm_ploygons("transit_rate") +
tm_borders()
tm_shape(coa_tracts) +
tm_fill("transit_rate") +
tm_borders()
names(coa_tracts)
tm_shape(coa_tracts) +
tm_fill("da_rate") +
tm_borders()
tm_shape(coa_tracts) +
tm_fill("av_commute_time(minutes)") +
tm_borders()
tm_shape(coa_tracts) +
tm_fill("walked_rate") +
tm_borders()
tm_shape(coa_tracts) +
tm_fill("med_rent") +
tm_borders()
names(coa_tracts)
tm_shape(coa_tracts) +
tm_fill("med_homeval") +
tm_borders()
rm(list = ls())
# specify date range
years_ago <- today() - years(2)
# execute API query
crash_url <- glue::glue("https://data.austintexas.gov/resource/dx9v-zd7x.json?$where=published_date > '{years_ago}'")
crash_raw <- as_tibble(read.socrata(crash_url))
?read_rds
# save crash data locally
st_write(crash_raw, "data/generated_shp_files/coa_crashes(points)/crash_raw.shp")
class(crash_raw)
crash_raw <- st_as_sf(crash_raw)
glimpse(crash_raw)
?st_as_sf
crash_raw <- st_as_sf(crash_raw, coords = c(longitude, latitude))
crash_raw <- st_as_sf(crash_raw, coords = c("longitude", "latitude"))
crash_raw <- na.omit(crash_raw)
crash_raw <- st_as_sf(crash_raw, coords = c("longitude", "latitude"))
# save crash data locally
st_write(crash_raw, "data/generated_shp_files/coa_crashes(points)/crash_raw.shp")
class(crash_raw)
